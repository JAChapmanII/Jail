// vim: ft=cpp:
#include <algorithm>
#include <sstream>

template<typename K, typename V>
        typename std::map<K, V>::iterator util::find(
                std::map<K, V> &map, K &value) {
    return map.find(value);
}
template<typename T, typename V>
        typename T::iterator util::find(T &container, V &value) {
    return std::find(container.begin(), container.end(), value);
}

template<typename T, typename V>
        bool util::contains(T &container, V &value) {
    return find(container, value) != container.end();
}

template<typename T, typename V>
        typename T::iterator util::find_if(T &container,
                const std::function<bool(V)> &predicate) {
    return std::find_if(container.begin(), container.end(), predicate);
}

template<typename T>
        T util::fromString(const std::string &str) {
    std::stringstream ss;
    ss << str;
    T ret;
    ss >> ret;
    return ret;
}

template<typename T>
        std::string util::join(std::vector<T> fields, std::string separator) {
    std::stringstream ss;
    for(unsigned i = 0; i < fields.size(); ++i) {
        ss << fields[i];
        if(i != fields.size() - 1)
            ss << separator;
    }
    return ss.str();
}

template<typename T, typename O, typename F>
        std::vector<O> util::map(std::vector<T> container, const F &predicate) {
    std::vector<O> out;
    out.reserve(container.size());
    for(T val : container)
        out.push_back(predicate(val));
    return out;
}

// vim:ts=4 et sw=4 sts=4
